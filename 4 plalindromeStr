<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>palindromeStr</title>
</head>
<body>
	<script>
	/*
		回文：就是前后元素一一对应着。也即：将字符串颠倒顺序后完全相等
	*/		
	function palindrome(str) {
		//颠倒顺序后的字符串
		var reverseStr = str.split('').reverse().join('');
		//判断颠倒顺序后的字符串与原字符串是否完全相等
		if (reverseStr == str) { 
			return 'palindrome';
		} else {
			return 'no palindrome';
		}
	} 

		/*自己写的回文字符串判断方法（感觉好傻，还一个一个比较判断）
			重点：对字符串元素个数奇数和偶数通用的方法
		*/
		function palindrome1(str) {
			//取得字符串中间位置索引
			var middleIndex = Math.floor(str.length / 2);
			var i = 0;
			var j = str.length - 1;
			//其实先考虑奇数情况，再补充偶数
			for(i, j; i < middleIndex && j >= middleIndex; i++, j--) {
				//前后对应位置有不相等，直接返回false
				if (str[i] != str[j]) return "不是回文字符串";
			}
			//上述都满足，直接返回true
			return "回文字符串";
		}
		var str = "abca";
		var strplalindrome = plalindrome2(str);
		console.log(strplalindrome);

		//别人写的，重点：用到了递归、并且考虑了大小写与其它字符
		function palindrome2(str) {
			// \W/g		用来查找所有非单词字符
			var re = /\W/g;
			//还要考虑字符串中大小写
			var lowRegStr = str.toLowerCase().replace(re,'');
			//如果一个单词，直接返回
			if(lowRegStr.length <= 1) { return "回文字符串"; }
			//如果首尾不相等，直接返回
			var endIndex = str.length - 1;
			if(lowRegStr[0] != lowRegStr[endIndex]) {return "不是回文字符串"; }
			//牛逼的无限递归：取出字符串的第二位至倒数第二位的字符串
			var newStr = lowRegStr.slice(1,endIndex);
			return palindrome2(newStr);
		}
	</script>
</body>
</html>